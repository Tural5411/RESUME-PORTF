<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="LAbout" xml:space="preserve">
    <value>About</value>
  </data>
  <data name="Ladress" xml:space="preserve">
    <value>Adress</value>
  </data>
  <data name="LAlifewithout" xml:space="preserve">
    <value>A life without the daily traffic jams</value>
  </data>
  <data name="LAppDeveloper" xml:space="preserve">
    <value>App Development</value>
  </data>
  <data name="LBakuState" xml:space="preserve">
    <value>Baku State University</value>
  </data>
  <data name="LBlog" xml:space="preserve">
    <value>Blog</value>
  </data>
  <data name="LClient" xml:space="preserve">
    <value>Client Reviews</value>
  </data>
  <data name="LClientDescript" xml:space="preserve">
    <value>Absolute wonderful ! I am completely                                     blown away.The very best.I was amazed       at the quality</value>
  </data>
  <data name="LCommunication" xml:space="preserve">
    <value>Communication</value>
  </data>
  <data name="LComparAcademy" xml:space="preserve">
    <value>Compar Academy</value>
  </data>
  <data name="LContact" xml:space="preserve">
    <value>Contact</value>
  </data>
  <data name="LContactMe" xml:space="preserve">
    <value>Contac tMe</value>
  </data>
  <data name="LCreativly" xml:space="preserve">
    <value>Creativly</value>
  </data>
  <data name="LDownloadCV" xml:space="preserve">
    <value>Download CV</value>
  </data>
  <data name="LEducation" xml:space="preserve">
    <value>Education</value>
  </data>
  <data name="LEmail" xml:space="preserve">
    <value>Email</value>
  </data>
  <data name="LExperience" xml:space="preserve">
    <value>Experience</value>
  </data>
  <data name="LFeaturedPost" xml:space="preserve">
    <value>Featured Post</value>
  </data>
  <data name="LFrontEnderIronSketch" xml:space="preserve">
    <value>Front ender İron Skecth</value>
  </data>
  <data name="LFullStackComparAcademy" xml:space="preserve">
    <value>Full Stack Compar Academy</value>
  </data>
  <data name="LHome" xml:space="preserve">
    <value>Home</value>
  </data>
  <data name="LNiceDescription" xml:space="preserve">
    <value>Since beginning my journey as a freelance designer nearly 8 years ago, I've done remote work for agencies, consulted for startups, and collaborated with talented people to create digital products for both business and consumer use. I'm quietly confident, naturally curious, and perpetually working on improving my chops one design problem at a time.</value>
  </data>
  <data name="LNiceToMeet" xml:space="preserve">
    <value>Hi, I’m Tural. Nice to meet you.</value>
  </data>
  <data name="LPhone" xml:space="preserve">
    <value>Phone</value>
  </data>
  <data name="LPlace" xml:space="preserve">
    <value>Azerbaijan , Baku</value>
  </data>
  <data name="LPortfolio" xml:space="preserve">
    <value>Portfolio</value>
  </data>
  <data name="LPostDescrip" xml:space="preserve">
    <value>It is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using</value>
  </data>
  <data name="LProject" xml:space="preserve">
    <value>Project Management</value>
  </data>
  <data name="LProSkills" xml:space="preserve">
    <value>Professional Skills</value>
  </data>
  <data name="LReadMore" xml:space="preserve">
    <value>Read More</value>
  </data>
  <data name="LSkills" xml:space="preserve">
    <value>Skills</value>
  </data>
  <data name="LStateDescrip" xml:space="preserve">
    <value>It is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using Lorem Ipsum</value>
  </data>
  <data name="LTeamWork" xml:space="preserve">
    <value>Team Work</value>
  </data>
  <data name="LTSkills" xml:space="preserve">
    <value>Technical Skills</value>
  </data>
  <data name="LTuralName" xml:space="preserve">
    <value>Tural Abdulkhaligov</value>
  </data>
  <data name="LUIDesign" xml:space="preserve">
    <value>UI Design</value>
  </data>
  <data name="LUİDescription" xml:space="preserve">
    <value>I value simple content structure, clean design patterns, and thoughtful interactions. Things I enjoy designing: UX, UI, Web, Mobile, Apps, Logos</value>
  </data>
  <data name="LWebDescrıptin" xml:space="preserve">
    <value>I like to code things from scratch, and enjoy bringing ideas to life in the browser. Languages I speak: HTML,C#, SQL, CSS, Sass, JS</value>
  </data>
  <data name="LWebDeveloper" xml:space="preserve">
    <value>Web Developer</value>
  </data>
  <data name="LWorkExperience" xml:space="preserve">
    <value>Work Experience</value>
  </data>
</root>